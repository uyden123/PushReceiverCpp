// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: checkin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "android_checkin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_checkin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_checkin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace checkin_proto {
class AndroidCheckinRequest;
class AndroidCheckinRequestDefaultTypeInternal;
extern AndroidCheckinRequestDefaultTypeInternal _AndroidCheckinRequest_default_instance_;
class AndroidCheckinResponse;
class AndroidCheckinResponseDefaultTypeInternal;
extern AndroidCheckinResponseDefaultTypeInternal _AndroidCheckinResponse_default_instance_;
class GservicesSetting;
class GservicesSettingDefaultTypeInternal;
extern GservicesSettingDefaultTypeInternal _GservicesSetting_default_instance_;
}  // namespace checkin_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::checkin_proto::AndroidCheckinRequest* Arena::CreateMaybeMessage<::checkin_proto::AndroidCheckinRequest>(Arena*);
template<> ::checkin_proto::AndroidCheckinResponse* Arena::CreateMaybeMessage<::checkin_proto::AndroidCheckinResponse>(Arena*);
template<> ::checkin_proto::GservicesSetting* Arena::CreateMaybeMessage<::checkin_proto::GservicesSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace checkin_proto {

// ===================================================================

class GservicesSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.GservicesSetting) */ {
 public:
  inline GservicesSetting() : GservicesSetting(nullptr) {}
  virtual ~GservicesSetting();

  GservicesSetting(const GservicesSetting& from);
  GservicesSetting(GservicesSetting&& from) noexcept
    : GservicesSetting() {
    *this = ::std::move(from);
  }

  inline GservicesSetting& operator=(const GservicesSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline GservicesSetting& operator=(GservicesSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GservicesSetting& default_instance();

  static inline const GservicesSetting* internal_default_instance() {
    return reinterpret_cast<const GservicesSetting*>(
               &_GservicesSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GservicesSetting& a, GservicesSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(GservicesSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GservicesSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GservicesSetting* New() const final {
    return CreateMaybeMessage<GservicesSetting>(nullptr);
  }

  GservicesSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GservicesSetting>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GservicesSetting& from);
  void MergeFrom(const GservicesSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GservicesSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkin_proto.GservicesSetting";
  }
  protected:
  explicit GservicesSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:checkin_proto.GservicesSetting)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_checkin_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinRequest) */ {
 public:
  inline AndroidCheckinRequest() : AndroidCheckinRequest(nullptr) {}
  virtual ~AndroidCheckinRequest();

  AndroidCheckinRequest(const AndroidCheckinRequest& from);
  AndroidCheckinRequest(AndroidCheckinRequest&& from) noexcept
    : AndroidCheckinRequest() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinRequest& operator=(const AndroidCheckinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinRequest& operator=(AndroidCheckinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidCheckinRequest& default_instance();

  static inline const AndroidCheckinRequest* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinRequest*>(
               &_AndroidCheckinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidCheckinRequest& a, AndroidCheckinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidCheckinRequest* New() const final {
    return CreateMaybeMessage<AndroidCheckinRequest>(nullptr);
  }

  AndroidCheckinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidCheckinRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidCheckinRequest& from);
  void MergeFrom(const AndroidCheckinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkin_proto.AndroidCheckinRequest";
  }
  protected:
  explicit AndroidCheckinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddrFieldNumber = 9,
    kAccountCookieFieldNumber = 11,
    kOtaCertFieldNumber = 15,
    kMacAddrTypeFieldNumber = 19,
    kImeiFieldNumber = 1,
    kDigestFieldNumber = 3,
    kDesiredBuildFieldNumber = 5,
    kLocaleFieldNumber = 6,
    kMarketCheckinFieldNumber = 8,
    kMeidFieldNumber = 10,
    kTimeZoneFieldNumber = 12,
    kSerialNumberFieldNumber = 16,
    kEsnFieldNumber = 17,
    kUserNameFieldNumber = 21,
    kCheckinFieldNumber = 4,
    kIdFieldNumber = 2,
    kLoggingIdFieldNumber = 7,
    kSecurityTokenFieldNumber = 13,
    kVersionFieldNumber = 14,
    kFragmentFieldNumber = 20,
    kUserSerialNumberFieldNumber = 22,
  };
  // repeated string mac_addr = 9;
  int mac_addr_size() const;
  private:
  int _internal_mac_addr_size() const;
  public:
  void clear_mac_addr();
  const std::string& mac_addr(int index) const;
  std::string* mutable_mac_addr(int index);
  void set_mac_addr(int index, const std::string& value);
  void set_mac_addr(int index, std::string&& value);
  void set_mac_addr(int index, const char* value);
  void set_mac_addr(int index, const char* value, size_t size);
  std::string* add_mac_addr();
  void add_mac_addr(const std::string& value);
  void add_mac_addr(std::string&& value);
  void add_mac_addr(const char* value);
  void add_mac_addr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mac_addr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mac_addr();
  private:
  const std::string& _internal_mac_addr(int index) const;
  std::string* _internal_add_mac_addr();
  public:

  // repeated string account_cookie = 11;
  int account_cookie_size() const;
  private:
  int _internal_account_cookie_size() const;
  public:
  void clear_account_cookie();
  const std::string& account_cookie(int index) const;
  std::string* mutable_account_cookie(int index);
  void set_account_cookie(int index, const std::string& value);
  void set_account_cookie(int index, std::string&& value);
  void set_account_cookie(int index, const char* value);
  void set_account_cookie(int index, const char* value, size_t size);
  std::string* add_account_cookie();
  void add_account_cookie(const std::string& value);
  void add_account_cookie(std::string&& value);
  void add_account_cookie(const char* value);
  void add_account_cookie(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_cookie() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_cookie();
  private:
  const std::string& _internal_account_cookie(int index) const;
  std::string* _internal_add_account_cookie();
  public:

  // repeated string ota_cert = 15;
  int ota_cert_size() const;
  private:
  int _internal_ota_cert_size() const;
  public:
  void clear_ota_cert();
  const std::string& ota_cert(int index) const;
  std::string* mutable_ota_cert(int index);
  void set_ota_cert(int index, const std::string& value);
  void set_ota_cert(int index, std::string&& value);
  void set_ota_cert(int index, const char* value);
  void set_ota_cert(int index, const char* value, size_t size);
  std::string* add_ota_cert();
  void add_ota_cert(const std::string& value);
  void add_ota_cert(std::string&& value);
  void add_ota_cert(const char* value);
  void add_ota_cert(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ota_cert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ota_cert();
  private:
  const std::string& _internal_ota_cert(int index) const;
  std::string* _internal_add_ota_cert();
  public:

  // repeated string mac_addr_type = 19;
  int mac_addr_type_size() const;
  private:
  int _internal_mac_addr_type_size() const;
  public:
  void clear_mac_addr_type();
  const std::string& mac_addr_type(int index) const;
  std::string* mutable_mac_addr_type(int index);
  void set_mac_addr_type(int index, const std::string& value);
  void set_mac_addr_type(int index, std::string&& value);
  void set_mac_addr_type(int index, const char* value);
  void set_mac_addr_type(int index, const char* value, size_t size);
  std::string* add_mac_addr_type();
  void add_mac_addr_type(const std::string& value);
  void add_mac_addr_type(std::string&& value);
  void add_mac_addr_type(const char* value);
  void add_mac_addr_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mac_addr_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mac_addr_type();
  private:
  const std::string& _internal_mac_addr_type(int index) const;
  std::string* _internal_add_mac_addr_type();
  public:

  // optional string imei = 1;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string digest = 3;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string desired_build = 5;
  bool has_desired_build() const;
  private:
  bool _internal_has_desired_build() const;
  public:
  void clear_desired_build();
  const std::string& desired_build() const;
  void set_desired_build(const std::string& value);
  void set_desired_build(std::string&& value);
  void set_desired_build(const char* value);
  void set_desired_build(const char* value, size_t size);
  std::string* mutable_desired_build();
  std::string* release_desired_build();
  void set_allocated_desired_build(std::string* desired_build);
  private:
  const std::string& _internal_desired_build() const;
  void _internal_set_desired_build(const std::string& value);
  std::string* _internal_mutable_desired_build();
  public:

  // optional string locale = 6;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional string market_checkin = 8;
  bool has_market_checkin() const;
  private:
  bool _internal_has_market_checkin() const;
  public:
  void clear_market_checkin();
  const std::string& market_checkin() const;
  void set_market_checkin(const std::string& value);
  void set_market_checkin(std::string&& value);
  void set_market_checkin(const char* value);
  void set_market_checkin(const char* value, size_t size);
  std::string* mutable_market_checkin();
  std::string* release_market_checkin();
  void set_allocated_market_checkin(std::string* market_checkin);
  private:
  const std::string& _internal_market_checkin() const;
  void _internal_set_market_checkin(const std::string& value);
  std::string* _internal_mutable_market_checkin();
  public:

  // optional string meid = 10;
  bool has_meid() const;
  private:
  bool _internal_has_meid() const;
  public:
  void clear_meid();
  const std::string& meid() const;
  void set_meid(const std::string& value);
  void set_meid(std::string&& value);
  void set_meid(const char* value);
  void set_meid(const char* value, size_t size);
  std::string* mutable_meid();
  std::string* release_meid();
  void set_allocated_meid(std::string* meid);
  private:
  const std::string& _internal_meid() const;
  void _internal_set_meid(const std::string& value);
  std::string* _internal_mutable_meid();
  public:

  // optional string time_zone = 12;
  bool has_time_zone() const;
  private:
  bool _internal_has_time_zone() const;
  public:
  void clear_time_zone();
  const std::string& time_zone() const;
  void set_time_zone(const std::string& value);
  void set_time_zone(std::string&& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  std::string* mutable_time_zone();
  std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // optional string serial_number = 16;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string esn = 17;
  bool has_esn() const;
  private:
  bool _internal_has_esn() const;
  public:
  void clear_esn();
  const std::string& esn() const;
  void set_esn(const std::string& value);
  void set_esn(std::string&& value);
  void set_esn(const char* value);
  void set_esn(const char* value, size_t size);
  std::string* mutable_esn();
  std::string* release_esn();
  void set_allocated_esn(std::string* esn);
  private:
  const std::string& _internal_esn() const;
  void _internal_set_esn(const std::string& value);
  std::string* _internal_mutable_esn();
  public:

  // optional string user_name = 21;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // required .checkin_proto.AndroidCheckinProto checkin = 4;
  bool has_checkin() const;
  private:
  bool _internal_has_checkin() const;
  public:
  void clear_checkin();
  const ::checkin_proto::AndroidCheckinProto& checkin() const;
  ::checkin_proto::AndroidCheckinProto* release_checkin();
  ::checkin_proto::AndroidCheckinProto* mutable_checkin();
  void set_allocated_checkin(::checkin_proto::AndroidCheckinProto* checkin);
  private:
  const ::checkin_proto::AndroidCheckinProto& _internal_checkin() const;
  ::checkin_proto::AndroidCheckinProto* _internal_mutable_checkin();
  public:
  void unsafe_arena_set_allocated_checkin(
      ::checkin_proto::AndroidCheckinProto* checkin);
  ::checkin_proto::AndroidCheckinProto* unsafe_arena_release_checkin();

  // optional int64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 logging_id = 7;
  bool has_logging_id() const;
  private:
  bool _internal_has_logging_id() const;
  public:
  void clear_logging_id();
  ::PROTOBUF_NAMESPACE_ID::int64 logging_id() const;
  void set_logging_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_logging_id() const;
  void _internal_set_logging_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 security_token = 13;
  bool has_security_token() const;
  private:
  bool _internal_has_security_token() const;
  public:
  void clear_security_token();
  ::PROTOBUF_NAMESPACE_ID::uint64 security_token() const;
  void set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_security_token() const;
  void _internal_set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 version = 14;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fragment = 20;
  bool has_fragment() const;
  private:
  bool _internal_has_fragment() const;
  public:
  void clear_fragment();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment() const;
  void set_fragment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment() const;
  void _internal_set_fragment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 user_serial_number = 22;
  bool has_user_serial_number() const;
  private:
  bool _internal_has_user_serial_number() const;
  public:
  void clear_user_serial_number();
  ::PROTOBUF_NAMESPACE_ID::int32 user_serial_number() const;
  void set_user_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_serial_number() const;
  void _internal_set_user_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mac_addr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_cookie_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ota_cert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mac_addr_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desired_build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_checkin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr esn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::checkin_proto::AndroidCheckinProto* checkin_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 logging_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 security_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_serial_number_;
  friend struct ::TableStruct_checkin_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinResponse) */ {
 public:
  inline AndroidCheckinResponse() : AndroidCheckinResponse(nullptr) {}
  virtual ~AndroidCheckinResponse();

  AndroidCheckinResponse(const AndroidCheckinResponse& from);
  AndroidCheckinResponse(AndroidCheckinResponse&& from) noexcept
    : AndroidCheckinResponse() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinResponse& operator=(const AndroidCheckinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinResponse& operator=(AndroidCheckinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidCheckinResponse& default_instance();

  static inline const AndroidCheckinResponse* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinResponse*>(
               &_AndroidCheckinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AndroidCheckinResponse& a, AndroidCheckinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidCheckinResponse* New() const final {
    return CreateMaybeMessage<AndroidCheckinResponse>(nullptr);
  }

  AndroidCheckinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidCheckinResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidCheckinResponse& from);
  void MergeFrom(const AndroidCheckinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkin_proto.AndroidCheckinResponse";
  }
  protected:
  explicit AndroidCheckinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingFieldNumber = 5,
    kDeleteSettingFieldNumber = 10,
    kDigestFieldNumber = 4,
    kVersionInfoFieldNumber = 11,
    kTimeMsecFieldNumber = 3,
    kAndroidIdFieldNumber = 7,
    kSecurityTokenFieldNumber = 8,
    kStatsOkFieldNumber = 1,
    kSettingsDiffFieldNumber = 9,
    kMarketOkFieldNumber = 6,
  };
  // repeated .checkin_proto.GservicesSetting setting = 5;
  int setting_size() const;
  private:
  int _internal_setting_size() const;
  public:
  void clear_setting();
  ::checkin_proto::GservicesSetting* mutable_setting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::checkin_proto::GservicesSetting >*
      mutable_setting();
  private:
  const ::checkin_proto::GservicesSetting& _internal_setting(int index) const;
  ::checkin_proto::GservicesSetting* _internal_add_setting();
  public:
  const ::checkin_proto::GservicesSetting& setting(int index) const;
  ::checkin_proto::GservicesSetting* add_setting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::checkin_proto::GservicesSetting >&
      setting() const;

  // repeated string delete_setting = 10;
  int delete_setting_size() const;
  private:
  int _internal_delete_setting_size() const;
  public:
  void clear_delete_setting();
  const std::string& delete_setting(int index) const;
  std::string* mutable_delete_setting(int index);
  void set_delete_setting(int index, const std::string& value);
  void set_delete_setting(int index, std::string&& value);
  void set_delete_setting(int index, const char* value);
  void set_delete_setting(int index, const char* value, size_t size);
  std::string* add_delete_setting();
  void add_delete_setting(const std::string& value);
  void add_delete_setting(std::string&& value);
  void add_delete_setting(const char* value);
  void add_delete_setting(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delete_setting() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delete_setting();
  private:
  const std::string& _internal_delete_setting(int index) const;
  std::string* _internal_add_delete_setting();
  public:

  // optional string digest = 4;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string version_info = 11;
  bool has_version_info() const;
  private:
  bool _internal_has_version_info() const;
  public:
  void clear_version_info();
  const std::string& version_info() const;
  void set_version_info(const std::string& value);
  void set_version_info(std::string&& value);
  void set_version_info(const char* value);
  void set_version_info(const char* value, size_t size);
  std::string* mutable_version_info();
  std::string* release_version_info();
  void set_allocated_version_info(std::string* version_info);
  private:
  const std::string& _internal_version_info() const;
  void _internal_set_version_info(const std::string& value);
  std::string* _internal_mutable_version_info();
  public:

  // optional int64 time_msec = 3;
  bool has_time_msec() const;
  private:
  bool _internal_has_time_msec() const;
  public:
  void clear_time_msec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_msec() const;
  void set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_msec() const;
  void _internal_set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 android_id = 7;
  bool has_android_id() const;
  private:
  bool _internal_has_android_id() const;
  public:
  void clear_android_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 android_id() const;
  void set_android_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_android_id() const;
  void _internal_set_android_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 security_token = 8;
  bool has_security_token() const;
  private:
  bool _internal_has_security_token() const;
  public:
  void clear_security_token();
  ::PROTOBUF_NAMESPACE_ID::uint64 security_token() const;
  void set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_security_token() const;
  void _internal_set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool stats_ok = 1;
  bool has_stats_ok() const;
  private:
  bool _internal_has_stats_ok() const;
  public:
  void clear_stats_ok();
  bool stats_ok() const;
  void set_stats_ok(bool value);
  private:
  bool _internal_stats_ok() const;
  void _internal_set_stats_ok(bool value);
  public:

  // optional bool settings_diff = 9;
  bool has_settings_diff() const;
  private:
  bool _internal_has_settings_diff() const;
  public:
  void clear_settings_diff();
  bool settings_diff() const;
  void set_settings_diff(bool value);
  private:
  bool _internal_settings_diff() const;
  void _internal_set_settings_diff(bool value);
  public:

  // optional bool market_ok = 6;
  bool has_market_ok() const;
  private:
  bool _internal_has_market_ok() const;
  public:
  void clear_market_ok();
  bool market_ok() const;
  void set_market_ok(bool value);
  private:
  bool _internal_market_ok() const;
  void _internal_set_market_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::checkin_proto::GservicesSetting > setting_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delete_setting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_msec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 android_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 security_token_;
  bool stats_ok_;
  bool settings_diff_;
  bool market_ok_;
  friend struct ::TableStruct_checkin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GservicesSetting

// required bytes name = 1;
inline bool GservicesSetting::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GservicesSetting::has_name() const {
  return _internal_has_name();
}
inline void GservicesSetting::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GservicesSetting::name() const {
  // @@protoc_insertion_point(field_get:checkin_proto.GservicesSetting.name)
  return _internal_name();
}
inline void GservicesSetting::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:checkin_proto.GservicesSetting.name)
}
inline std::string* GservicesSetting::mutable_name() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.GservicesSetting.name)
  return _internal_mutable_name();
}
inline const std::string& GservicesSetting::_internal_name() const {
  return name_.Get();
}
inline void GservicesSetting::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GservicesSetting::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.GservicesSetting.name)
}
inline void GservicesSetting::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.GservicesSetting.name)
}
inline void GservicesSetting::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.GservicesSetting.name)
}
inline std::string* GservicesSetting::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GservicesSetting::release_name() {
  // @@protoc_insertion_point(field_release:checkin_proto.GservicesSetting.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GservicesSetting::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.GservicesSetting.name)
}

// required bytes value = 2;
inline bool GservicesSetting::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GservicesSetting::has_value() const {
  return _internal_has_value();
}
inline void GservicesSetting::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GservicesSetting::value() const {
  // @@protoc_insertion_point(field_get:checkin_proto.GservicesSetting.value)
  return _internal_value();
}
inline void GservicesSetting::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:checkin_proto.GservicesSetting.value)
}
inline std::string* GservicesSetting::mutable_value() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.GservicesSetting.value)
  return _internal_mutable_value();
}
inline const std::string& GservicesSetting::_internal_value() const {
  return value_.Get();
}
inline void GservicesSetting::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GservicesSetting::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.GservicesSetting.value)
}
inline void GservicesSetting::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.GservicesSetting.value)
}
inline void GservicesSetting::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.GservicesSetting.value)
}
inline std::string* GservicesSetting::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GservicesSetting::release_value() {
  // @@protoc_insertion_point(field_release:checkin_proto.GservicesSetting.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GservicesSetting::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.GservicesSetting.value)
}

// -------------------------------------------------------------------

// AndroidCheckinRequest

// optional string imei = 1;
inline bool AndroidCheckinRequest::_internal_has_imei() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_imei() const {
  return _internal_has_imei();
}
inline void AndroidCheckinRequest::clear_imei() {
  imei_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinRequest::imei() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.imei)
  return _internal_imei();
}
inline void AndroidCheckinRequest::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.imei)
}
inline std::string* AndroidCheckinRequest::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.imei)
  return _internal_mutable_imei();
}
inline const std::string& AndroidCheckinRequest::_internal_imei() const {
  return imei_.Get();
}
inline void AndroidCheckinRequest::_internal_set_imei(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_imei(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  imei_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.imei)
}
inline void AndroidCheckinRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.imei)
}
inline void AndroidCheckinRequest::set_imei(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.imei)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_imei() {
  _has_bits_[0] |= 0x00000001u;
  return imei_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_imei() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return imei_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imei_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.imei)
}

// optional string meid = 10;
inline bool AndroidCheckinRequest::_internal_has_meid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_meid() const {
  return _internal_has_meid();
}
inline void AndroidCheckinRequest::clear_meid() {
  meid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AndroidCheckinRequest::meid() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.meid)
  return _internal_meid();
}
inline void AndroidCheckinRequest::set_meid(const std::string& value) {
  _internal_set_meid(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.meid)
}
inline std::string* AndroidCheckinRequest::mutable_meid() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.meid)
  return _internal_mutable_meid();
}
inline const std::string& AndroidCheckinRequest::_internal_meid() const {
  return meid_.Get();
}
inline void AndroidCheckinRequest::_internal_set_meid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  meid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_meid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  meid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.meid)
}
inline void AndroidCheckinRequest::set_meid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  meid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.meid)
}
inline void AndroidCheckinRequest::set_meid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  meid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.meid)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_meid() {
  _has_bits_[0] |= 0x00000020u;
  return meid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_meid() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.meid)
  if (!_internal_has_meid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return meid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_meid(std::string* meid) {
  if (meid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  meid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.meid)
}

// repeated string mac_addr = 9;
inline int AndroidCheckinRequest::_internal_mac_addr_size() const {
  return mac_addr_.size();
}
inline int AndroidCheckinRequest::mac_addr_size() const {
  return _internal_mac_addr_size();
}
inline void AndroidCheckinRequest::clear_mac_addr() {
  mac_addr_.Clear();
}
inline std::string* AndroidCheckinRequest::add_mac_addr() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.mac_addr)
  return _internal_add_mac_addr();
}
inline const std::string& AndroidCheckinRequest::_internal_mac_addr(int index) const {
  return mac_addr_.Get(index);
}
inline const std::string& AndroidCheckinRequest::mac_addr(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.mac_addr)
  return _internal_mac_addr(index);
}
inline std::string* AndroidCheckinRequest::mutable_mac_addr(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_.Mutable(index);
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr)
  mac_addr_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_mac_addr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr)
  mac_addr_.Mutable(index)->assign(std::move(value));
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::set_mac_addr(int index, const char* value, size_t size) {
  mac_addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline std::string* AndroidCheckinRequest::_internal_add_mac_addr() {
  return mac_addr_.Add();
}
inline void AndroidCheckinRequest::add_mac_addr(const std::string& value) {
  mac_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::add_mac_addr(std::string&& value) {
  mac_addr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::add_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline void AndroidCheckinRequest::add_mac_addr(const char* value, size_t size) {
  mac_addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.mac_addr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::mac_addr() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.mac_addr)
  return mac_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_mac_addr() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.mac_addr)
  return &mac_addr_;
}

// repeated string mac_addr_type = 19;
inline int AndroidCheckinRequest::_internal_mac_addr_type_size() const {
  return mac_addr_type_.size();
}
inline int AndroidCheckinRequest::mac_addr_type_size() const {
  return _internal_mac_addr_type_size();
}
inline void AndroidCheckinRequest::clear_mac_addr_type() {
  mac_addr_type_.Clear();
}
inline std::string* AndroidCheckinRequest::add_mac_addr_type() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return _internal_add_mac_addr_type();
}
inline const std::string& AndroidCheckinRequest::_internal_mac_addr_type(int index) const {
  return mac_addr_type_.Get(index);
}
inline const std::string& AndroidCheckinRequest::mac_addr_type(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return _internal_mac_addr_type(index);
}
inline std::string* AndroidCheckinRequest::mutable_mac_addr_type(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_.Mutable(index);
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  mac_addr_type_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  mac_addr_type_.Mutable(index)->assign(std::move(value));
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addr_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::set_mac_addr_type(int index, const char* value, size_t size) {
  mac_addr_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline std::string* AndroidCheckinRequest::_internal_add_mac_addr_type() {
  return mac_addr_type_.Add();
}
inline void AndroidCheckinRequest::add_mac_addr_type(const std::string& value) {
  mac_addr_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::add_mac_addr_type(std::string&& value) {
  mac_addr_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::add_mac_addr_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addr_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline void AndroidCheckinRequest::add_mac_addr_type(const char* value, size_t size) {
  mac_addr_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.mac_addr_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::mac_addr_type() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return mac_addr_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_mac_addr_type() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.mac_addr_type)
  return &mac_addr_type_;
}

// optional string serial_number = 16;
inline bool AndroidCheckinRequest::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void AndroidCheckinRequest::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AndroidCheckinRequest::serial_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.serial_number)
  return _internal_serial_number();
}
inline void AndroidCheckinRequest::set_serial_number(const std::string& value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline std::string* AndroidCheckinRequest::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& AndroidCheckinRequest::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void AndroidCheckinRequest::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_serial_number(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  serial_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline void AndroidCheckinRequest::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline void AndroidCheckinRequest::set_serial_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.serial_number)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000080u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_serial_number() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.serial_number)
}

// optional string esn = 17;
inline bool AndroidCheckinRequest::_internal_has_esn() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_esn() const {
  return _internal_has_esn();
}
inline void AndroidCheckinRequest::clear_esn() {
  esn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AndroidCheckinRequest::esn() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.esn)
  return _internal_esn();
}
inline void AndroidCheckinRequest::set_esn(const std::string& value) {
  _internal_set_esn(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.esn)
}
inline std::string* AndroidCheckinRequest::mutable_esn() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.esn)
  return _internal_mutable_esn();
}
inline const std::string& AndroidCheckinRequest::_internal_esn() const {
  return esn_.Get();
}
inline void AndroidCheckinRequest::_internal_set_esn(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  esn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_esn(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  esn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.esn)
}
inline void AndroidCheckinRequest::set_esn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  esn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.esn)
}
inline void AndroidCheckinRequest::set_esn(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  esn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.esn)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_esn() {
  _has_bits_[0] |= 0x00000100u;
  return esn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_esn() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.esn)
  if (!_internal_has_esn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return esn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_esn(std::string* esn) {
  if (esn != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  esn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), esn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.esn)
}

// optional int64 id = 2;
inline bool AndroidCheckinRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_id() const {
  return _internal_has_id();
}
inline void AndroidCheckinRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinRequest::id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.id)
  return _internal_id();
}
inline void AndroidCheckinRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  id_ = value;
}
inline void AndroidCheckinRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.id)
}

// optional int64 logging_id = 7;
inline bool AndroidCheckinRequest::_internal_has_logging_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_logging_id() const {
  return _internal_has_logging_id();
}
inline void AndroidCheckinRequest::clear_logging_id() {
  logging_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinRequest::_internal_logging_id() const {
  return logging_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinRequest::logging_id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.logging_id)
  return _internal_logging_id();
}
inline void AndroidCheckinRequest::_internal_set_logging_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  logging_id_ = value;
}
inline void AndroidCheckinRequest::set_logging_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_logging_id(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.logging_id)
}

// optional string digest = 3;
inline bool AndroidCheckinRequest::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_digest() const {
  return _internal_has_digest();
}
inline void AndroidCheckinRequest::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinRequest::digest() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.digest)
  return _internal_digest();
}
inline void AndroidCheckinRequest::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.digest)
}
inline std::string* AndroidCheckinRequest::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.digest)
  return _internal_mutable_digest();
}
inline const std::string& AndroidCheckinRequest::_internal_digest() const {
  return digest_.Get();
}
inline void AndroidCheckinRequest::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  digest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.digest)
}
inline void AndroidCheckinRequest::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.digest)
}
inline void AndroidCheckinRequest::set_digest(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.digest)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000002u;
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_digest() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return digest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.digest)
}

// optional string locale = 6;
inline bool AndroidCheckinRequest::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_locale() const {
  return _internal_has_locale();
}
inline void AndroidCheckinRequest::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AndroidCheckinRequest::locale() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.locale)
  return _internal_locale();
}
inline void AndroidCheckinRequest::set_locale(const std::string& value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.locale)
}
inline std::string* AndroidCheckinRequest::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.locale)
  return _internal_mutable_locale();
}
inline const std::string& AndroidCheckinRequest::_internal_locale() const {
  return locale_.Get();
}
inline void AndroidCheckinRequest::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.locale)
}
inline void AndroidCheckinRequest::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.locale)
}
inline void AndroidCheckinRequest::set_locale(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.locale)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000008u;
  return locale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_locale() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return locale_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.locale)
}

// required .checkin_proto.AndroidCheckinProto checkin = 4;
inline bool AndroidCheckinRequest::_internal_has_checkin() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || checkin_ != nullptr);
  return value;
}
inline bool AndroidCheckinRequest::has_checkin() const {
  return _internal_has_checkin();
}
inline const ::checkin_proto::AndroidCheckinProto& AndroidCheckinRequest::_internal_checkin() const {
  const ::checkin_proto::AndroidCheckinProto* p = checkin_;
  return p != nullptr ? *p : reinterpret_cast<const ::checkin_proto::AndroidCheckinProto&>(
      ::checkin_proto::_AndroidCheckinProto_default_instance_);
}
inline const ::checkin_proto::AndroidCheckinProto& AndroidCheckinRequest::checkin() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.checkin)
  return _internal_checkin();
}
inline void AndroidCheckinRequest::unsafe_arena_set_allocated_checkin(
    ::checkin_proto::AndroidCheckinProto* checkin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkin_);
  }
  checkin_ = checkin;
  if (checkin) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkin_proto.AndroidCheckinRequest.checkin)
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::release_checkin() {
  _has_bits_[0] &= ~0x00000400u;
  ::checkin_proto::AndroidCheckinProto* temp = checkin_;
  checkin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::unsafe_arena_release_checkin() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.checkin)
  _has_bits_[0] &= ~0x00000400u;
  ::checkin_proto::AndroidCheckinProto* temp = checkin_;
  checkin_ = nullptr;
  return temp;
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::_internal_mutable_checkin() {
  _has_bits_[0] |= 0x00000400u;
  if (checkin_ == nullptr) {
    auto* p = CreateMaybeMessage<::checkin_proto::AndroidCheckinProto>(GetArena());
    checkin_ = p;
  }
  return checkin_;
}
inline ::checkin_proto::AndroidCheckinProto* AndroidCheckinRequest::mutable_checkin() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.checkin)
  return _internal_mutable_checkin();
}
inline void AndroidCheckinRequest::set_allocated_checkin(::checkin_proto::AndroidCheckinProto* checkin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkin_);
  }
  if (checkin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkin)->GetArena();
    if (message_arena != submessage_arena) {
      checkin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  checkin_ = checkin;
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.checkin)
}

// optional string desired_build = 5;
inline bool AndroidCheckinRequest::_internal_has_desired_build() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_desired_build() const {
  return _internal_has_desired_build();
}
inline void AndroidCheckinRequest::clear_desired_build() {
  desired_build_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidCheckinRequest::desired_build() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.desired_build)
  return _internal_desired_build();
}
inline void AndroidCheckinRequest::set_desired_build(const std::string& value) {
  _internal_set_desired_build(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline std::string* AndroidCheckinRequest::mutable_desired_build() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.desired_build)
  return _internal_mutable_desired_build();
}
inline const std::string& AndroidCheckinRequest::_internal_desired_build() const {
  return desired_build_.Get();
}
inline void AndroidCheckinRequest::_internal_set_desired_build(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  desired_build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_desired_build(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  desired_build_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline void AndroidCheckinRequest::set_desired_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  desired_build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline void AndroidCheckinRequest::set_desired_build(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  desired_build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.desired_build)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_desired_build() {
  _has_bits_[0] |= 0x00000004u;
  return desired_build_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_desired_build() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.desired_build)
  if (!_internal_has_desired_build()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return desired_build_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_desired_build(std::string* desired_build) {
  if (desired_build != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  desired_build_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desired_build,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.desired_build)
}

// optional string market_checkin = 8;
inline bool AndroidCheckinRequest::_internal_has_market_checkin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_market_checkin() const {
  return _internal_has_market_checkin();
}
inline void AndroidCheckinRequest::clear_market_checkin() {
  market_checkin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AndroidCheckinRequest::market_checkin() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.market_checkin)
  return _internal_market_checkin();
}
inline void AndroidCheckinRequest::set_market_checkin(const std::string& value) {
  _internal_set_market_checkin(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline std::string* AndroidCheckinRequest::mutable_market_checkin() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.market_checkin)
  return _internal_mutable_market_checkin();
}
inline const std::string& AndroidCheckinRequest::_internal_market_checkin() const {
  return market_checkin_.Get();
}
inline void AndroidCheckinRequest::_internal_set_market_checkin(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  market_checkin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_market_checkin(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  market_checkin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline void AndroidCheckinRequest::set_market_checkin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  market_checkin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline void AndroidCheckinRequest::set_market_checkin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  market_checkin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.market_checkin)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_market_checkin() {
  _has_bits_[0] |= 0x00000010u;
  return market_checkin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_market_checkin() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.market_checkin)
  if (!_internal_has_market_checkin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return market_checkin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_market_checkin(std::string* market_checkin) {
  if (market_checkin != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  market_checkin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_checkin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.market_checkin)
}

// repeated string account_cookie = 11;
inline int AndroidCheckinRequest::_internal_account_cookie_size() const {
  return account_cookie_.size();
}
inline int AndroidCheckinRequest::account_cookie_size() const {
  return _internal_account_cookie_size();
}
inline void AndroidCheckinRequest::clear_account_cookie() {
  account_cookie_.Clear();
}
inline std::string* AndroidCheckinRequest::add_account_cookie() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.account_cookie)
  return _internal_add_account_cookie();
}
inline const std::string& AndroidCheckinRequest::_internal_account_cookie(int index) const {
  return account_cookie_.Get(index);
}
inline const std::string& AndroidCheckinRequest::account_cookie(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.account_cookie)
  return _internal_account_cookie(index);
}
inline std::string* AndroidCheckinRequest::mutable_account_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_.Mutable(index);
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.account_cookie)
  account_cookie_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_account_cookie(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.account_cookie)
  account_cookie_.Mutable(index)->assign(std::move(value));
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_cookie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::set_account_cookie(int index, const char* value, size_t size) {
  account_cookie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline std::string* AndroidCheckinRequest::_internal_add_account_cookie() {
  return account_cookie_.Add();
}
inline void AndroidCheckinRequest::add_account_cookie(const std::string& value) {
  account_cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::add_account_cookie(std::string&& value) {
  account_cookie_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::add_account_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline void AndroidCheckinRequest::add_account_cookie(const char* value, size_t size) {
  account_cookie_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.account_cookie)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::account_cookie() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.account_cookie)
  return account_cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_account_cookie() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.account_cookie)
  return &account_cookie_;
}

// optional string time_zone = 12;
inline bool AndroidCheckinRequest::_internal_has_time_zone() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_time_zone() const {
  return _internal_has_time_zone();
}
inline void AndroidCheckinRequest::clear_time_zone() {
  time_zone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AndroidCheckinRequest::time_zone() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.time_zone)
  return _internal_time_zone();
}
inline void AndroidCheckinRequest::set_time_zone(const std::string& value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline std::string* AndroidCheckinRequest::mutable_time_zone() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.time_zone)
  return _internal_mutable_time_zone();
}
inline const std::string& AndroidCheckinRequest::_internal_time_zone() const {
  return time_zone_.Get();
}
inline void AndroidCheckinRequest::_internal_set_time_zone(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_time_zone(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  time_zone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline void AndroidCheckinRequest::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline void AndroidCheckinRequest::set_time_zone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.time_zone)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_time_zone() {
  _has_bits_[0] |= 0x00000040u;
  return time_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_time_zone() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.time_zone)
  if (!_internal_has_time_zone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return time_zone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  time_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.time_zone)
}

// optional fixed64 security_token = 13;
inline bool AndroidCheckinRequest::_internal_has_security_token() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_security_token() const {
  return _internal_has_security_token();
}
inline void AndroidCheckinRequest::clear_security_token() {
  security_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinRequest::_internal_security_token() const {
  return security_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinRequest::security_token() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.security_token)
  return _internal_security_token();
}
inline void AndroidCheckinRequest::_internal_set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  security_token_ = value;
}
inline void AndroidCheckinRequest::set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_security_token(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.security_token)
}

// optional int32 version = 14;
inline bool AndroidCheckinRequest::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_version() const {
  return _internal_has_version();
}
inline void AndroidCheckinRequest::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::version() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.version)
  return _internal_version();
}
inline void AndroidCheckinRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  version_ = value;
}
inline void AndroidCheckinRequest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.version)
}

// repeated string ota_cert = 15;
inline int AndroidCheckinRequest::_internal_ota_cert_size() const {
  return ota_cert_.size();
}
inline int AndroidCheckinRequest::ota_cert_size() const {
  return _internal_ota_cert_size();
}
inline void AndroidCheckinRequest::clear_ota_cert() {
  ota_cert_.Clear();
}
inline std::string* AndroidCheckinRequest::add_ota_cert() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinRequest.ota_cert)
  return _internal_add_ota_cert();
}
inline const std::string& AndroidCheckinRequest::_internal_ota_cert(int index) const {
  return ota_cert_.Get(index);
}
inline const std::string& AndroidCheckinRequest::ota_cert(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.ota_cert)
  return _internal_ota_cert(index);
}
inline std::string* AndroidCheckinRequest::mutable_ota_cert(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_.Mutable(index);
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.ota_cert)
  ota_cert_.Mutable(index)->assign(value);
}
inline void AndroidCheckinRequest::set_ota_cert(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.ota_cert)
  ota_cert_.Mutable(index)->assign(std::move(value));
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ota_cert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::set_ota_cert(int index, const char* value, size_t size) {
  ota_cert_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline std::string* AndroidCheckinRequest::_internal_add_ota_cert() {
  return ota_cert_.Add();
}
inline void AndroidCheckinRequest::add_ota_cert(const std::string& value) {
  ota_cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::add_ota_cert(std::string&& value) {
  ota_cert_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::add_ota_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ota_cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline void AndroidCheckinRequest::add_ota_cert(const char* value, size_t size) {
  ota_cert_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinRequest.ota_cert)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::ota_cert() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinRequest.ota_cert)
  return ota_cert_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_ota_cert() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinRequest.ota_cert)
  return &ota_cert_;
}

// optional int32 fragment = 20;
inline bool AndroidCheckinRequest::_internal_has_fragment() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_fragment() const {
  return _internal_has_fragment();
}
inline void AndroidCheckinRequest::clear_fragment() {
  fragment_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::_internal_fragment() const {
  return fragment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::fragment() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.fragment)
  return _internal_fragment();
}
inline void AndroidCheckinRequest::_internal_set_fragment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  fragment_ = value;
}
inline void AndroidCheckinRequest::set_fragment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.fragment)
}

// optional string user_name = 21;
inline bool AndroidCheckinRequest::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_user_name() const {
  return _internal_has_user_name();
}
inline void AndroidCheckinRequest::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& AndroidCheckinRequest::user_name() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.user_name)
  return _internal_user_name();
}
inline void AndroidCheckinRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.user_name)
}
inline std::string* AndroidCheckinRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& AndroidCheckinRequest::_internal_user_name() const {
  return user_name_.Get();
}
inline void AndroidCheckinRequest::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinRequest::set_user_name(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinRequest.user_name)
}
inline void AndroidCheckinRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinRequest.user_name)
}
inline void AndroidCheckinRequest::set_user_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinRequest.user_name)
}
inline std::string* AndroidCheckinRequest::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000200u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinRequest.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinRequest.user_name)
}

// optional int32 user_serial_number = 22;
inline bool AndroidCheckinRequest::_internal_has_user_serial_number() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_user_serial_number() const {
  return _internal_has_user_serial_number();
}
inline void AndroidCheckinRequest::clear_user_serial_number() {
  user_serial_number_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::_internal_user_serial_number() const {
  return user_serial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinRequest::user_serial_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinRequest.user_serial_number)
  return _internal_user_serial_number();
}
inline void AndroidCheckinRequest::_internal_set_user_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  user_serial_number_ = value;
}
inline void AndroidCheckinRequest::set_user_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_serial_number(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinRequest.user_serial_number)
}

// -------------------------------------------------------------------

// AndroidCheckinResponse

// required bool stats_ok = 1;
inline bool AndroidCheckinResponse::_internal_has_stats_ok() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_stats_ok() const {
  return _internal_has_stats_ok();
}
inline void AndroidCheckinResponse::clear_stats_ok() {
  stats_ok_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool AndroidCheckinResponse::_internal_stats_ok() const {
  return stats_ok_;
}
inline bool AndroidCheckinResponse::stats_ok() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.stats_ok)
  return _internal_stats_ok();
}
inline void AndroidCheckinResponse::_internal_set_stats_ok(bool value) {
  _has_bits_[0] |= 0x00000020u;
  stats_ok_ = value;
}
inline void AndroidCheckinResponse::set_stats_ok(bool value) {
  _internal_set_stats_ok(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.stats_ok)
}

// optional int64 time_msec = 3;
inline bool AndroidCheckinResponse::_internal_has_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_time_msec() const {
  return _internal_has_time_msec();
}
inline void AndroidCheckinResponse::clear_time_msec() {
  time_msec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinResponse::_internal_time_msec() const {
  return time_msec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinResponse::time_msec() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.time_msec)
  return _internal_time_msec();
}
inline void AndroidCheckinResponse::_internal_set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_msec_ = value;
}
inline void AndroidCheckinResponse::set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_msec(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.time_msec)
}

// optional string digest = 4;
inline bool AndroidCheckinResponse::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_digest() const {
  return _internal_has_digest();
}
inline void AndroidCheckinResponse::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinResponse::digest() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.digest)
  return _internal_digest();
}
inline void AndroidCheckinResponse::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.digest)
}
inline std::string* AndroidCheckinResponse::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.digest)
  return _internal_mutable_digest();
}
inline const std::string& AndroidCheckinResponse::_internal_digest() const {
  return digest_.Get();
}
inline void AndroidCheckinResponse::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinResponse::set_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinResponse.digest)
}
inline void AndroidCheckinResponse::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.digest)
}
inline void AndroidCheckinResponse::set_digest(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.digest)
}
inline std::string* AndroidCheckinResponse::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinResponse::release_digest() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinResponse.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return digest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinResponse::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinResponse.digest)
}

// optional bool settings_diff = 9;
inline bool AndroidCheckinResponse::_internal_has_settings_diff() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_settings_diff() const {
  return _internal_has_settings_diff();
}
inline void AndroidCheckinResponse::clear_settings_diff() {
  settings_diff_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AndroidCheckinResponse::_internal_settings_diff() const {
  return settings_diff_;
}
inline bool AndroidCheckinResponse::settings_diff() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.settings_diff)
  return _internal_settings_diff();
}
inline void AndroidCheckinResponse::_internal_set_settings_diff(bool value) {
  _has_bits_[0] |= 0x00000040u;
  settings_diff_ = value;
}
inline void AndroidCheckinResponse::set_settings_diff(bool value) {
  _internal_set_settings_diff(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.settings_diff)
}

// repeated string delete_setting = 10;
inline int AndroidCheckinResponse::_internal_delete_setting_size() const {
  return delete_setting_.size();
}
inline int AndroidCheckinResponse::delete_setting_size() const {
  return _internal_delete_setting_size();
}
inline void AndroidCheckinResponse::clear_delete_setting() {
  delete_setting_.Clear();
}
inline std::string* AndroidCheckinResponse::add_delete_setting() {
  // @@protoc_insertion_point(field_add_mutable:checkin_proto.AndroidCheckinResponse.delete_setting)
  return _internal_add_delete_setting();
}
inline const std::string& AndroidCheckinResponse::_internal_delete_setting(int index) const {
  return delete_setting_.Get(index);
}
inline const std::string& AndroidCheckinResponse::delete_setting(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.delete_setting)
  return _internal_delete_setting(index);
}
inline std::string* AndroidCheckinResponse::mutable_delete_setting(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_.Mutable(index);
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.delete_setting)
  delete_setting_.Mutable(index)->assign(value);
}
inline void AndroidCheckinResponse::set_delete_setting(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.delete_setting)
  delete_setting_.Mutable(index)->assign(std::move(value));
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delete_setting_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::set_delete_setting(int index, const char* value, size_t size) {
  delete_setting_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline std::string* AndroidCheckinResponse::_internal_add_delete_setting() {
  return delete_setting_.Add();
}
inline void AndroidCheckinResponse::add_delete_setting(const std::string& value) {
  delete_setting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::add_delete_setting(std::string&& value) {
  delete_setting_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::add_delete_setting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delete_setting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline void AndroidCheckinResponse::add_delete_setting(const char* value, size_t size) {
  delete_setting_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:checkin_proto.AndroidCheckinResponse.delete_setting)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinResponse::delete_setting() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinResponse.delete_setting)
  return delete_setting_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinResponse::mutable_delete_setting() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinResponse.delete_setting)
  return &delete_setting_;
}

// repeated .checkin_proto.GservicesSetting setting = 5;
inline int AndroidCheckinResponse::_internal_setting_size() const {
  return setting_.size();
}
inline int AndroidCheckinResponse::setting_size() const {
  return _internal_setting_size();
}
inline void AndroidCheckinResponse::clear_setting() {
  setting_.Clear();
}
inline ::checkin_proto::GservicesSetting* AndroidCheckinResponse::mutable_setting(int index) {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.setting)
  return setting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::checkin_proto::GservicesSetting >*
AndroidCheckinResponse::mutable_setting() {
  // @@protoc_insertion_point(field_mutable_list:checkin_proto.AndroidCheckinResponse.setting)
  return &setting_;
}
inline const ::checkin_proto::GservicesSetting& AndroidCheckinResponse::_internal_setting(int index) const {
  return setting_.Get(index);
}
inline const ::checkin_proto::GservicesSetting& AndroidCheckinResponse::setting(int index) const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.setting)
  return _internal_setting(index);
}
inline ::checkin_proto::GservicesSetting* AndroidCheckinResponse::_internal_add_setting() {
  return setting_.Add();
}
inline ::checkin_proto::GservicesSetting* AndroidCheckinResponse::add_setting() {
  // @@protoc_insertion_point(field_add:checkin_proto.AndroidCheckinResponse.setting)
  return _internal_add_setting();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::checkin_proto::GservicesSetting >&
AndroidCheckinResponse::setting() const {
  // @@protoc_insertion_point(field_list:checkin_proto.AndroidCheckinResponse.setting)
  return setting_;
}

// optional bool market_ok = 6;
inline bool AndroidCheckinResponse::_internal_has_market_ok() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_market_ok() const {
  return _internal_has_market_ok();
}
inline void AndroidCheckinResponse::clear_market_ok() {
  market_ok_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AndroidCheckinResponse::_internal_market_ok() const {
  return market_ok_;
}
inline bool AndroidCheckinResponse::market_ok() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.market_ok)
  return _internal_market_ok();
}
inline void AndroidCheckinResponse::_internal_set_market_ok(bool value) {
  _has_bits_[0] |= 0x00000080u;
  market_ok_ = value;
}
inline void AndroidCheckinResponse::set_market_ok(bool value) {
  _internal_set_market_ok(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.market_ok)
}

// optional fixed64 android_id = 7;
inline bool AndroidCheckinResponse::_internal_has_android_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_android_id() const {
  return _internal_has_android_id();
}
inline void AndroidCheckinResponse::clear_android_id() {
  android_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinResponse::_internal_android_id() const {
  return android_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinResponse::android_id() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.android_id)
  return _internal_android_id();
}
inline void AndroidCheckinResponse::_internal_set_android_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  android_id_ = value;
}
inline void AndroidCheckinResponse::set_android_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_android_id(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.android_id)
}

// optional fixed64 security_token = 8;
inline bool AndroidCheckinResponse::_internal_has_security_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_security_token() const {
  return _internal_has_security_token();
}
inline void AndroidCheckinResponse::clear_security_token() {
  security_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinResponse::_internal_security_token() const {
  return security_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidCheckinResponse::security_token() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.security_token)
  return _internal_security_token();
}
inline void AndroidCheckinResponse::_internal_set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  security_token_ = value;
}
inline void AndroidCheckinResponse::set_security_token(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_security_token(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.security_token)
}

// optional string version_info = 11;
inline bool AndroidCheckinResponse::_internal_has_version_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_version_info() const {
  return _internal_has_version_info();
}
inline void AndroidCheckinResponse::clear_version_info() {
  version_info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinResponse::version_info() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinResponse.version_info)
  return _internal_version_info();
}
inline void AndroidCheckinResponse::set_version_info(const std::string& value) {
  _internal_set_version_info(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinResponse.version_info)
}
inline std::string* AndroidCheckinResponse::mutable_version_info() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinResponse.version_info)
  return _internal_mutable_version_info();
}
inline const std::string& AndroidCheckinResponse::_internal_version_info() const {
  return version_info_.Get();
}
inline void AndroidCheckinResponse::_internal_set_version_info(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinResponse::set_version_info(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinResponse.version_info)
}
inline void AndroidCheckinResponse::set_version_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinResponse.version_info)
}
inline void AndroidCheckinResponse::set_version_info(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinResponse.version_info)
}
inline std::string* AndroidCheckinResponse::_internal_mutable_version_info() {
  _has_bits_[0] |= 0x00000002u;
  return version_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinResponse::release_version_info() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinResponse.version_info)
  if (!_internal_has_version_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinResponse::set_allocated_version_info(std::string* version_info) {
  if (version_info != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinResponse.version_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace checkin_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto
