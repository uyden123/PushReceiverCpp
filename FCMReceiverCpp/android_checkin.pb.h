// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_android_5fcheckin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_android_5fcheckin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace checkin_proto {
class AndroidCheckinProto;
class AndroidCheckinProtoDefaultTypeInternal;
extern AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
class ChromeBuildProto;
class ChromeBuildProtoDefaultTypeInternal;
extern ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
}  // namespace checkin_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::checkin_proto::AndroidCheckinProto* Arena::CreateMaybeMessage<::checkin_proto::AndroidCheckinProto>(Arena*);
template<> ::checkin_proto::ChromeBuildProto* Arena::CreateMaybeMessage<::checkin_proto::ChromeBuildProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace checkin_proto {

enum ChromeBuildProto_Platform : int {
  ChromeBuildProto_Platform_PLATFORM_WIN = 1,
  ChromeBuildProto_Platform_PLATFORM_MAC = 2,
  ChromeBuildProto_Platform_PLATFORM_LINUX = 3,
  ChromeBuildProto_Platform_PLATFORM_CROS = 4,
  ChromeBuildProto_Platform_PLATFORM_IOS = 5,
  ChromeBuildProto_Platform_PLATFORM_ANDROID = 6
};
bool ChromeBuildProto_Platform_IsValid(int value);
constexpr ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MIN = ChromeBuildProto_Platform_PLATFORM_WIN;
constexpr ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MAX = ChromeBuildProto_Platform_PLATFORM_ANDROID;
constexpr int ChromeBuildProto_Platform_Platform_ARRAYSIZE = ChromeBuildProto_Platform_Platform_MAX + 1;

const std::string& ChromeBuildProto_Platform_Name(ChromeBuildProto_Platform value);
template<typename T>
inline const std::string& ChromeBuildProto_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeBuildProto_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeBuildProto_Platform_Name.");
  return ChromeBuildProto_Platform_Name(static_cast<ChromeBuildProto_Platform>(enum_t_value));
}
bool ChromeBuildProto_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBuildProto_Platform* value);
enum ChromeBuildProto_Channel : int {
  ChromeBuildProto_Channel_CHANNEL_STABLE = 1,
  ChromeBuildProto_Channel_CHANNEL_BETA = 2,
  ChromeBuildProto_Channel_CHANNEL_DEV = 3,
  ChromeBuildProto_Channel_CHANNEL_CANARY = 4,
  ChromeBuildProto_Channel_CHANNEL_UNKNOWN = 5
};
bool ChromeBuildProto_Channel_IsValid(int value);
constexpr ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MIN = ChromeBuildProto_Channel_CHANNEL_STABLE;
constexpr ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MAX = ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
constexpr int ChromeBuildProto_Channel_Channel_ARRAYSIZE = ChromeBuildProto_Channel_Channel_MAX + 1;

const std::string& ChromeBuildProto_Channel_Name(ChromeBuildProto_Channel value);
template<typename T>
inline const std::string& ChromeBuildProto_Channel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeBuildProto_Channel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeBuildProto_Channel_Name.");
  return ChromeBuildProto_Channel_Name(static_cast<ChromeBuildProto_Channel>(enum_t_value));
}
bool ChromeBuildProto_Channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBuildProto_Channel* value);
enum DeviceType : int {
  DEVICE_ANDROID_OS = 1,
  DEVICE_IOS_OS = 2,
  DEVICE_CHROME_BROWSER = 3,
  DEVICE_CHROME_OS = 4
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = DEVICE_ANDROID_OS;
constexpr DeviceType DeviceType_MAX = DEVICE_CHROME_OS;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const std::string& DeviceType_Name(DeviceType value);
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return DeviceType_Name(static_cast<DeviceType>(enum_t_value));
}
bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value);
// ===================================================================

class ChromeBuildProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.ChromeBuildProto) */ {
 public:
  inline ChromeBuildProto() : ChromeBuildProto(nullptr) {}
  virtual ~ChromeBuildProto();

  ChromeBuildProto(const ChromeBuildProto& from);
  ChromeBuildProto(ChromeBuildProto&& from) noexcept
    : ChromeBuildProto() {
    *this = ::std::move(from);
  }

  inline ChromeBuildProto& operator=(const ChromeBuildProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeBuildProto& operator=(ChromeBuildProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeBuildProto& default_instance();

  static inline const ChromeBuildProto* internal_default_instance() {
    return reinterpret_cast<const ChromeBuildProto*>(
               &_ChromeBuildProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeBuildProto& a, ChromeBuildProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeBuildProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeBuildProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeBuildProto* New() const final {
    return CreateMaybeMessage<ChromeBuildProto>(nullptr);
  }

  ChromeBuildProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeBuildProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeBuildProto& from);
  void MergeFrom(const ChromeBuildProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeBuildProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkin_proto.ChromeBuildProto";
  }
  protected:
  explicit ChromeBuildProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeBuildProto_Platform Platform;
  static constexpr Platform PLATFORM_WIN =
    ChromeBuildProto_Platform_PLATFORM_WIN;
  static constexpr Platform PLATFORM_MAC =
    ChromeBuildProto_Platform_PLATFORM_MAC;
  static constexpr Platform PLATFORM_LINUX =
    ChromeBuildProto_Platform_PLATFORM_LINUX;
  static constexpr Platform PLATFORM_CROS =
    ChromeBuildProto_Platform_PLATFORM_CROS;
  static constexpr Platform PLATFORM_IOS =
    ChromeBuildProto_Platform_PLATFORM_IOS;
  static constexpr Platform PLATFORM_ANDROID =
    ChromeBuildProto_Platform_PLATFORM_ANDROID;
  static inline bool Platform_IsValid(int value) {
    return ChromeBuildProto_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    ChromeBuildProto_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    ChromeBuildProto_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    ChromeBuildProto_Platform_Platform_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return ChromeBuildProto_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return ChromeBuildProto_Platform_Parse(name, value);
  }

  typedef ChromeBuildProto_Channel Channel;
  static constexpr Channel CHANNEL_STABLE =
    ChromeBuildProto_Channel_CHANNEL_STABLE;
  static constexpr Channel CHANNEL_BETA =
    ChromeBuildProto_Channel_CHANNEL_BETA;
  static constexpr Channel CHANNEL_DEV =
    ChromeBuildProto_Channel_CHANNEL_DEV;
  static constexpr Channel CHANNEL_CANARY =
    ChromeBuildProto_Channel_CHANNEL_CANARY;
  static constexpr Channel CHANNEL_UNKNOWN =
    ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
  static inline bool Channel_IsValid(int value) {
    return ChromeBuildProto_Channel_IsValid(value);
  }
  static constexpr Channel Channel_MIN =
    ChromeBuildProto_Channel_Channel_MIN;
  static constexpr Channel Channel_MAX =
    ChromeBuildProto_Channel_Channel_MAX;
  static constexpr int Channel_ARRAYSIZE =
    ChromeBuildProto_Channel_Channel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Channel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Channel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Channel_Name.");
    return ChromeBuildProto_Channel_Name(enum_t_value);
  }
  static inline bool Channel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Channel* value) {
    return ChromeBuildProto_Channel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChromeVersionFieldNumber = 2,
    kPlatformFieldNumber = 1,
    kChannelFieldNumber = 3,
  };
  // optional string chrome_version = 2;
  bool has_chrome_version() const;
  private:
  bool _internal_has_chrome_version() const;
  public:
  void clear_chrome_version();
  const std::string& chrome_version() const;
  void set_chrome_version(const std::string& value);
  void set_chrome_version(std::string&& value);
  void set_chrome_version(const char* value);
  void set_chrome_version(const char* value, size_t size);
  std::string* mutable_chrome_version();
  std::string* release_chrome_version();
  void set_allocated_chrome_version(std::string* chrome_version);
  private:
  const std::string& _internal_chrome_version() const;
  void _internal_set_chrome_version(const std::string& value);
  std::string* _internal_mutable_chrome_version();
  public:

  // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  ::checkin_proto::ChromeBuildProto_Platform platform() const;
  void set_platform(::checkin_proto::ChromeBuildProto_Platform value);
  private:
  ::checkin_proto::ChromeBuildProto_Platform _internal_platform() const;
  void _internal_set_platform(::checkin_proto::ChromeBuildProto_Platform value);
  public:

  // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::checkin_proto::ChromeBuildProto_Channel channel() const;
  void set_channel(::checkin_proto::ChromeBuildProto_Channel value);
  private:
  ::checkin_proto::ChromeBuildProto_Channel _internal_channel() const;
  void _internal_set_channel(::checkin_proto::ChromeBuildProto_Channel value);
  public:

  // @@protoc_insertion_point(class_scope:checkin_proto.ChromeBuildProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrome_version_;
  int platform_;
  int channel_;
  friend struct ::TableStruct_android_5fcheckin_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinProto) */ {
 public:
  inline AndroidCheckinProto() : AndroidCheckinProto(nullptr) {}
  virtual ~AndroidCheckinProto();

  AndroidCheckinProto(const AndroidCheckinProto& from);
  AndroidCheckinProto(AndroidCheckinProto&& from) noexcept
    : AndroidCheckinProto() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinProto& operator=(const AndroidCheckinProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinProto& operator=(AndroidCheckinProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidCheckinProto& default_instance();

  static inline const AndroidCheckinProto* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinProto*>(
               &_AndroidCheckinProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidCheckinProto& a, AndroidCheckinProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidCheckinProto* New() const final {
    return CreateMaybeMessage<AndroidCheckinProto>(nullptr);
  }

  AndroidCheckinProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidCheckinProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidCheckinProto& from);
  void MergeFrom(const AndroidCheckinProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidCheckinProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkin_proto.AndroidCheckinProto";
  }
  protected:
  explicit AndroidCheckinProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellOperatorFieldNumber = 6,
    kSimOperatorFieldNumber = 7,
    kRoamingFieldNumber = 8,
    kChromeBuildFieldNumber = 13,
    kLastCheckinMsecFieldNumber = 2,
    kUserNumberFieldNumber = 9,
    kTypeFieldNumber = 12,
  };
  // optional string cell_operator = 6;
  bool has_cell_operator() const;
  private:
  bool _internal_has_cell_operator() const;
  public:
  void clear_cell_operator();
  const std::string& cell_operator() const;
  void set_cell_operator(const std::string& value);
  void set_cell_operator(std::string&& value);
  void set_cell_operator(const char* value);
  void set_cell_operator(const char* value, size_t size);
  std::string* mutable_cell_operator();
  std::string* release_cell_operator();
  void set_allocated_cell_operator(std::string* cell_operator);
  private:
  const std::string& _internal_cell_operator() const;
  void _internal_set_cell_operator(const std::string& value);
  std::string* _internal_mutable_cell_operator();
  public:

  // optional string sim_operator = 7;
  bool has_sim_operator() const;
  private:
  bool _internal_has_sim_operator() const;
  public:
  void clear_sim_operator();
  const std::string& sim_operator() const;
  void set_sim_operator(const std::string& value);
  void set_sim_operator(std::string&& value);
  void set_sim_operator(const char* value);
  void set_sim_operator(const char* value, size_t size);
  std::string* mutable_sim_operator();
  std::string* release_sim_operator();
  void set_allocated_sim_operator(std::string* sim_operator);
  private:
  const std::string& _internal_sim_operator() const;
  void _internal_set_sim_operator(const std::string& value);
  std::string* _internal_mutable_sim_operator();
  public:

  // optional string roaming = 8;
  bool has_roaming() const;
  private:
  bool _internal_has_roaming() const;
  public:
  void clear_roaming();
  const std::string& roaming() const;
  void set_roaming(const std::string& value);
  void set_roaming(std::string&& value);
  void set_roaming(const char* value);
  void set_roaming(const char* value, size_t size);
  std::string* mutable_roaming();
  std::string* release_roaming();
  void set_allocated_roaming(std::string* roaming);
  private:
  const std::string& _internal_roaming() const;
  void _internal_set_roaming(const std::string& value);
  std::string* _internal_mutable_roaming();
  public:

  // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
  bool has_chrome_build() const;
  private:
  bool _internal_has_chrome_build() const;
  public:
  void clear_chrome_build();
  const ::checkin_proto::ChromeBuildProto& chrome_build() const;
  ::checkin_proto::ChromeBuildProto* release_chrome_build();
  ::checkin_proto::ChromeBuildProto* mutable_chrome_build();
  void set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build);
  private:
  const ::checkin_proto::ChromeBuildProto& _internal_chrome_build() const;
  ::checkin_proto::ChromeBuildProto* _internal_mutable_chrome_build();
  public:
  void unsafe_arena_set_allocated_chrome_build(
      ::checkin_proto::ChromeBuildProto* chrome_build);
  ::checkin_proto::ChromeBuildProto* unsafe_arena_release_chrome_build();

  // optional int64 last_checkin_msec = 2;
  bool has_last_checkin_msec() const;
  private:
  bool _internal_has_last_checkin_msec() const;
  public:
  void clear_last_checkin_msec();
  ::PROTOBUF_NAMESPACE_ID::int64 last_checkin_msec() const;
  void set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_checkin_msec() const;
  void _internal_set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 user_number = 9;
  bool has_user_number() const;
  private:
  bool _internal_has_user_number() const;
  public:
  void clear_user_number();
  ::PROTOBUF_NAMESPACE_ID::int32 user_number() const;
  void set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_number() const;
  void _internal_set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::checkin_proto::DeviceType type() const;
  void set_type(::checkin_proto::DeviceType value);
  private:
  ::checkin_proto::DeviceType _internal_type() const;
  void _internal_set_type(::checkin_proto::DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roaming_;
  ::checkin_proto::ChromeBuildProto* chrome_build_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_checkin_msec_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_number_;
  int type_;
  friend struct ::TableStruct_android_5fcheckin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeBuildProto

// optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
inline bool ChromeBuildProto::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeBuildProto::has_platform() const {
  return _internal_has_platform();
}
inline void ChromeBuildProto::clear_platform() {
  platform_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::checkin_proto::ChromeBuildProto_Platform ChromeBuildProto::_internal_platform() const {
  return static_cast< ::checkin_proto::ChromeBuildProto_Platform >(platform_);
}
inline ::checkin_proto::ChromeBuildProto_Platform ChromeBuildProto::platform() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.platform)
  return _internal_platform();
}
inline void ChromeBuildProto::_internal_set_platform(::checkin_proto::ChromeBuildProto_Platform value) {
  assert(::checkin_proto::ChromeBuildProto_Platform_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  platform_ = value;
}
inline void ChromeBuildProto::set_platform(::checkin_proto::ChromeBuildProto_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.platform)
}

// optional string chrome_version = 2;
inline bool ChromeBuildProto::_internal_has_chrome_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeBuildProto::has_chrome_version() const {
  return _internal_has_chrome_version();
}
inline void ChromeBuildProto::clear_chrome_version() {
  chrome_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeBuildProto::chrome_version() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.chrome_version)
  return _internal_chrome_version();
}
inline void ChromeBuildProto::set_chrome_version(const std::string& value) {
  _internal_set_chrome_version(value);
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.chrome_version)
}
inline std::string* ChromeBuildProto::mutable_chrome_version() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.ChromeBuildProto.chrome_version)
  return _internal_mutable_chrome_version();
}
inline const std::string& ChromeBuildProto::_internal_chrome_version() const {
  return chrome_version_.Get();
}
inline void ChromeBuildProto::_internal_set_chrome_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  chrome_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChromeBuildProto::set_chrome_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  chrome_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  chrome_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  chrome_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.ChromeBuildProto.chrome_version)
}
inline std::string* ChromeBuildProto::_internal_mutable_chrome_version() {
  _has_bits_[0] |= 0x00000001u;
  return chrome_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChromeBuildProto::release_chrome_version() {
  // @@protoc_insertion_point(field_release:checkin_proto.ChromeBuildProto.chrome_version)
  if (!_internal_has_chrome_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return chrome_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChromeBuildProto::set_allocated_chrome_version(std::string* chrome_version) {
  if (chrome_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chrome_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chrome_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.ChromeBuildProto.chrome_version)
}

// optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
inline bool ChromeBuildProto::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeBuildProto::has_channel() const {
  return _internal_has_channel();
}
inline void ChromeBuildProto::clear_channel() {
  channel_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::checkin_proto::ChromeBuildProto_Channel ChromeBuildProto::_internal_channel() const {
  return static_cast< ::checkin_proto::ChromeBuildProto_Channel >(channel_);
}
inline ::checkin_proto::ChromeBuildProto_Channel ChromeBuildProto::channel() const {
  // @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.channel)
  return _internal_channel();
}
inline void ChromeBuildProto::_internal_set_channel(::checkin_proto::ChromeBuildProto_Channel value) {
  assert(::checkin_proto::ChromeBuildProto_Channel_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  channel_ = value;
}
inline void ChromeBuildProto::set_channel(::checkin_proto::ChromeBuildProto_Channel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.channel)
}

// -------------------------------------------------------------------

// AndroidCheckinProto

// optional int64 last_checkin_msec = 2;
inline bool AndroidCheckinProto::_internal_has_last_checkin_msec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_last_checkin_msec() const {
  return _internal_has_last_checkin_msec();
}
inline void AndroidCheckinProto::clear_last_checkin_msec() {
  last_checkin_msec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinProto::_internal_last_checkin_msec() const {
  return last_checkin_msec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinProto::last_checkin_msec() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.last_checkin_msec)
  return _internal_last_checkin_msec();
}
inline void AndroidCheckinProto::_internal_set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_checkin_msec_ = value;
}
inline void AndroidCheckinProto::set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_checkin_msec(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.last_checkin_msec)
}

// optional string cell_operator = 6;
inline bool AndroidCheckinProto::_internal_has_cell_operator() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_cell_operator() const {
  return _internal_has_cell_operator();
}
inline void AndroidCheckinProto::clear_cell_operator() {
  cell_operator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinProto::cell_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.cell_operator)
  return _internal_cell_operator();
}
inline void AndroidCheckinProto::set_cell_operator(const std::string& value) {
  _internal_set_cell_operator(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline std::string* AndroidCheckinProto::mutable_cell_operator() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.cell_operator)
  return _internal_mutable_cell_operator();
}
inline const std::string& AndroidCheckinProto::_internal_cell_operator() const {
  return cell_operator_.Get();
}
inline void AndroidCheckinProto::_internal_set_cell_operator(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cell_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinProto::set_cell_operator(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cell_operator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cell_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cell_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline std::string* AndroidCheckinProto::_internal_mutable_cell_operator() {
  _has_bits_[0] |= 0x00000001u;
  return cell_operator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinProto::release_cell_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.cell_operator)
  if (!_internal_has_cell_operator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cell_operator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinProto::set_allocated_cell_operator(std::string* cell_operator) {
  if (cell_operator != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_operator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_operator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.cell_operator)
}

// optional string sim_operator = 7;
inline bool AndroidCheckinProto::_internal_has_sim_operator() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_sim_operator() const {
  return _internal_has_sim_operator();
}
inline void AndroidCheckinProto::clear_sim_operator() {
  sim_operator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinProto::sim_operator() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.sim_operator)
  return _internal_sim_operator();
}
inline void AndroidCheckinProto::set_sim_operator(const std::string& value) {
  _internal_set_sim_operator(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline std::string* AndroidCheckinProto::mutable_sim_operator() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.sim_operator)
  return _internal_mutable_sim_operator();
}
inline const std::string& AndroidCheckinProto::_internal_sim_operator() const {
  return sim_operator_.Get();
}
inline void AndroidCheckinProto::_internal_set_sim_operator(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sim_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinProto::set_sim_operator(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sim_operator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sim_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sim_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline std::string* AndroidCheckinProto::_internal_mutable_sim_operator() {
  _has_bits_[0] |= 0x00000002u;
  return sim_operator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinProto::release_sim_operator() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.sim_operator)
  if (!_internal_has_sim_operator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sim_operator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinProto::set_allocated_sim_operator(std::string* sim_operator) {
  if (sim_operator != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sim_operator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim_operator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.sim_operator)
}

// optional string roaming = 8;
inline bool AndroidCheckinProto::_internal_has_roaming() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_roaming() const {
  return _internal_has_roaming();
}
inline void AndroidCheckinProto::clear_roaming() {
  roaming_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidCheckinProto::roaming() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.roaming)
  return _internal_roaming();
}
inline void AndroidCheckinProto::set_roaming(const std::string& value) {
  _internal_set_roaming(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.roaming)
}
inline std::string* AndroidCheckinProto::mutable_roaming() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.roaming)
  return _internal_mutable_roaming();
}
inline const std::string& AndroidCheckinProto::_internal_roaming() const {
  return roaming_.Get();
}
inline void AndroidCheckinProto::_internal_set_roaming(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  roaming_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AndroidCheckinProto::set_roaming(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  roaming_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  roaming_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  roaming_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.roaming)
}
inline std::string* AndroidCheckinProto::_internal_mutable_roaming() {
  _has_bits_[0] |= 0x00000004u;
  return roaming_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AndroidCheckinProto::release_roaming() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.roaming)
  if (!_internal_has_roaming()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return roaming_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidCheckinProto::set_allocated_roaming(std::string* roaming) {
  if (roaming != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roaming_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roaming,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.roaming)
}

// optional int32 user_number = 9;
inline bool AndroidCheckinProto::_internal_has_user_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_user_number() const {
  return _internal_has_user_number();
}
inline void AndroidCheckinProto::clear_user_number() {
  user_number_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinProto::_internal_user_number() const {
  return user_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinProto::user_number() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.user_number)
  return _internal_user_number();
}
inline void AndroidCheckinProto::_internal_set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  user_number_ = value;
}
inline void AndroidCheckinProto::set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_number(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.user_number)
}

// optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
inline bool AndroidCheckinProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_type() const {
  return _internal_has_type();
}
inline void AndroidCheckinProto::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::checkin_proto::DeviceType AndroidCheckinProto::_internal_type() const {
  return static_cast< ::checkin_proto::DeviceType >(type_);
}
inline ::checkin_proto::DeviceType AndroidCheckinProto::type() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.type)
  return _internal_type();
}
inline void AndroidCheckinProto::_internal_set_type(::checkin_proto::DeviceType value) {
  assert(::checkin_proto::DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void AndroidCheckinProto::set_type(::checkin_proto::DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.type)
}

// optional .checkin_proto.ChromeBuildProto chrome_build = 13;
inline bool AndroidCheckinProto::_internal_has_chrome_build() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || chrome_build_ != nullptr);
  return value;
}
inline bool AndroidCheckinProto::has_chrome_build() const {
  return _internal_has_chrome_build();
}
inline void AndroidCheckinProto::clear_chrome_build() {
  if (chrome_build_ != nullptr) chrome_build_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::checkin_proto::ChromeBuildProto& AndroidCheckinProto::_internal_chrome_build() const {
  const ::checkin_proto::ChromeBuildProto* p = chrome_build_;
  return p != nullptr ? *p : reinterpret_cast<const ::checkin_proto::ChromeBuildProto&>(
      ::checkin_proto::_ChromeBuildProto_default_instance_);
}
inline const ::checkin_proto::ChromeBuildProto& AndroidCheckinProto::chrome_build() const {
  // @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.chrome_build)
  return _internal_chrome_build();
}
inline void AndroidCheckinProto::unsafe_arena_set_allocated_chrome_build(
    ::checkin_proto::ChromeBuildProto* chrome_build) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_build_);
  }
  chrome_build_ = chrome_build;
  if (chrome_build) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkin_proto.AndroidCheckinProto.chrome_build)
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::release_chrome_build() {
  _has_bits_[0] &= ~0x00000008u;
  ::checkin_proto::ChromeBuildProto* temp = chrome_build_;
  chrome_build_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::unsafe_arena_release_chrome_build() {
  // @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.chrome_build)
  _has_bits_[0] &= ~0x00000008u;
  ::checkin_proto::ChromeBuildProto* temp = chrome_build_;
  chrome_build_ = nullptr;
  return temp;
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::_internal_mutable_chrome_build() {
  _has_bits_[0] |= 0x00000008u;
  if (chrome_build_ == nullptr) {
    auto* p = CreateMaybeMessage<::checkin_proto::ChromeBuildProto>(GetArena());
    chrome_build_ = p;
  }
  return chrome_build_;
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::mutable_chrome_build() {
  // @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.chrome_build)
  return _internal_mutable_chrome_build();
}
inline void AndroidCheckinProto::set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chrome_build_;
  }
  if (chrome_build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chrome_build);
    if (message_arena != submessage_arena) {
      chrome_build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_build, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_build_ = chrome_build;
  // @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.chrome_build)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace checkin_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Platform> : ::std::true_type {};
template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Channel> : ::std::true_type {};
template <> struct is_proto_enum< ::checkin_proto::DeviceType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto
